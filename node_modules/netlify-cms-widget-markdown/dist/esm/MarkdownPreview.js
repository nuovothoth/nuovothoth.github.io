"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.getEditorPreview = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _serializers = require("./serializers");

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let editorPreview;

const getEditorPreview = () => editorPreview;

exports.getEditorPreview = getEditorPreview;

const MarkdownPreview = props => {
  const {
    value,
    getAsset,
    resolveWidget
  } = props;
  (0, _react.useEffect)(() => {
    editorPreview = props.editorPreview;
  }, []);

  if (value === null) {
    return null;
  }

  const html = (0, _serializers.markdownToHtml)(value, {
    getAsset,
    resolveWidget
  });
  return (0, _core.jsx)(_netlifyCmsUiDefault.WidgetPreviewContainer, {
    dangerouslySetInnerHTML: {
      __html: html
    }
  });
};

MarkdownPreview.propTypes = {
  getAsset: _propTypes.default.func.isRequired,
  editorPreview: _propTypes.default.func.isRequired,
  resolveWidget: _propTypes.default.func.isRequired,
  value: _propTypes.default.string
};
var _default = MarkdownPreview;
exports.default = _default;