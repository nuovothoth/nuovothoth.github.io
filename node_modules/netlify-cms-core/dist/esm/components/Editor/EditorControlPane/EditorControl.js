"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ControlHint = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _partial2 = _interopRequireDefault(require("lodash/partial"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _reactPolyglot = require("react-polyglot");

var _core = require("@emotion/core");

var _reactRedux = require("react-redux");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _registry = require("../../../lib/registry");

var _entries = require("../../../actions/entries");

var _media = require("../../../actions/media");

var _search = require("../../../actions/search");

var _mediaLibrary = require("../../../actions/mediaLibrary");

var _reducers = require("../../../reducers");

var _Widget = _interopRequireDefault(require("./Widget"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject7() {
  const data = _taggedTemplateLiteral(["\n                ", ";\n              "]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  const data = _taggedTemplateLiteral(["\n                ", ";\n              "]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  const data = _taggedTemplateLiteral(["\n                ", ";\n              "]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  const data = _taggedTemplateLiteral(["\n                ", ";\n              "]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  const data = _taggedTemplateLiteral(["\n                    ", ";\n                  "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  const data = _taggedTemplateLiteral(["\n                    ", ";\n                  "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n                  ", ";\n                "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

/**
 * This is a necessary bridge as we are still passing classnames to widgets
 * for styling. Once that changes we can stop storing raw style strings like
 * this.
 */
const styleStrings = {
  widget: "\n    display: block;\n    width: 100%;\n    padding: ".concat(_netlifyCmsUiDefault.lengths.inputPadding, ";\n    margin: 0;\n    border: ").concat(_netlifyCmsUiDefault.borders.textField, ";\n    border-radius: ").concat(_netlifyCmsUiDefault.lengths.borderRadius, ";\n    border-top-left-radius: 0;\n    outline: 0;\n    box-shadow: none;\n    background-color: ").concat(_netlifyCmsUiDefault.colors.inputBackground, ";\n    color: #444a57;\n    transition: border-color ").concat(_netlifyCmsUiDefault.transitions.main, ";\n    position: relative;\n    font-size: 15px;\n    line-height: 1.5;\n\n    select& {\n      text-indent: 14px;\n      height: 58px;\n    }\n  "),
  widgetActive: "\n    border-color: ".concat(_netlifyCmsUiDefault.colors.active, ";\n  "),
  widgetError: "\n    border-color: ".concat(_netlifyCmsUiDefault.colors.errorText, ";\n  ")
};
const ControlContainer = (0, _styledBase.default)("div", {
  target: "ei073ck0",
  label: "ControlContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "gpgisz",
  styles: "margin-top:16px;&:first-of-type{margin-top:36px;}"
} : {
  name: "gpgisz",
  styles: "margin-top:16px;&:first-of-type{margin-top:36px;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ControlErrorsList = (0, _styledBase.default)("ul", {
  target: "ei073ck1",
  label: "ControlErrorsList"
})("list-style-type:none;font-size:12px;color:", _netlifyCmsUiDefault.colors.errorText, ";margin-bottom:5px;text-align:right;text-transform:uppercase;position:relative;font-weight:600;top:20px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ControlHint = (0, _styledBase.default)("p", {
  target: "ei073ck2",
  label: "ControlHint"
})("margin-bottom:0;padding:3px 0;font-size:12px;color:", props => props.error ? _netlifyCmsUiDefault.colors.errorText : props.active ? _netlifyCmsUiDefault.colors.active : _netlifyCmsUiDefault.colors.controlLabel, ";transition:color ", _netlifyCmsUiDefault.transitions.main, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.ControlHint = ControlHint;

class EditorControl extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      activeLabel: false
    });

    _defineProperty(this, "uniqueFieldId", (0, _uniqueId2.default)("".concat(this.props.field.get('name'), "-field-")));
  }

  render() {
    const {
      value,
      field,
      fieldsMetaData,
      fieldsErrors,
      mediaPaths,
      boundGetAsset,
      onChange: _onChange,
      openMediaLibrary,
      clearMediaControl,
      removeMediaControl,
      addAsset,
      removeInsertedMedia,
      onValidate,
      processControlRef,
      controlRef,
      query,
      queryHits,
      isFetching,
      clearSearch,
      clearFieldErrors,
      loadEntry,
      className,
      isSelected,
      isEditorComponent,
      isNewEditorComponent,
      t
    } = this.props;
    const widgetName = field.get('widget');
    const widget = (0, _registry.resolveWidget)(widgetName);
    const fieldName = field.get('name');
    const fieldHint = field.get('hint');
    const isFieldOptional = field.get('required') === false;
    const onValidateObject = onValidate;
    const metadata = fieldsMetaData && fieldsMetaData.get(fieldName);
    const errors = fieldsErrors && fieldsErrors.get(this.uniqueFieldId);
    return (0, _core.jsx)(_core.ClassNames, null, (_ref) => {
      let {
        css,
        cx
      } = _ref;
      return (0, _core.jsx)(ControlContainer, {
        className: className
      }, widget.globalStyles && (0, _core.jsx)(_core.Global, {
        styles:
        /*#__PURE__*/
        (0, _core.css)(widget.globalStyles, ";label:EditorControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
      }), errors && (0, _core.jsx)(ControlErrorsList, null, errors.map(error => error.message && typeof error.message === 'string' && (0, _core.jsx)("li", {
        key: error.message.trim().replace(/[^a-z0-9]+/gi, '-')
      }, error.message))), (0, _core.jsx)(_netlifyCmsUiDefault.FieldLabel, {
        isActive: isSelected || this.state.styleActive,
        hasErrors: !!errors,
        htmlFor: this.uniqueFieldId
      }, "".concat(field.get('label', field.get('name'))).concat(isFieldOptional ? ' (optional)' : '')), (0, _core.jsx)(_Widget.default, {
        classNameWrapper: cx(css(_templateObject(), styleStrings.widget), {
          [css(_templateObject2(), styleStrings.widgetActive)]: isSelected || this.state.styleActive
        }, {
          [css(_templateObject3(), styleStrings.widgetError)]: !!errors
        }),
        classNameWidget: css(_templateObject4(), styleStrings.widget),
        classNameWidgetActive: css(_templateObject5(), styleStrings.widgetActive),
        classNameLabel: css(_templateObject6(), styleStrings.label),
        classNameLabelActive: css(_templateObject7(), styleStrings.labelActive),
        controlComponent: widget.control,
        field: field,
        uniqueFieldId: this.uniqueFieldId,
        value: value,
        mediaPaths: mediaPaths,
        metadata: metadata,
        onChange: (newValue, newMetadata) => _onChange(fieldName, newValue, newMetadata),
        onValidate: onValidate && (0, _partial2.default)(onValidate, this.uniqueFieldId),
        onOpenMediaLibrary: openMediaLibrary,
        onClearMediaControl: clearMediaControl,
        onRemoveMediaControl: removeMediaControl,
        onRemoveInsertedMedia: removeInsertedMedia,
        onAddAsset: addAsset,
        getAsset: boundGetAsset,
        hasActiveStyle: isSelected || this.state.styleActive,
        setActiveStyle: () => this.setState({
          styleActive: true
        }),
        setInactiveStyle: () => this.setState({
          styleActive: false
        }),
        resolveWidget: _registry.resolveWidget,
        widget: widget,
        getEditorComponents: _registry.getEditorComponents,
        ref: processControlRef && (0, _partial2.default)(processControlRef, field),
        controlRef: controlRef,
        editorControl: ConnectedEditorControl,
        query: query,
        loadEntry: loadEntry,
        queryHits: queryHits,
        clearSearch: clearSearch,
        clearFieldErrors: clearFieldErrors,
        isFetching: isFetching,
        fieldsErrors: fieldsErrors,
        onValidateObject: onValidateObject,
        isEditorComponent: isEditorComponent,
        isNewEditorComponent: isNewEditorComponent,
        t: t
      }), fieldHint && (0, _core.jsx)(ControlHint, {
        active: isSelected || this.state.styleActive,
        error: !!errors
      }, fieldHint));
    });
  }

}

_defineProperty(EditorControl, "propTypes", {
  value: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.object, _propTypes.default.string, _propTypes.default.bool]),
  field: _reactImmutableProptypes.default.map.isRequired,
  fieldsMetaData: _reactImmutableProptypes.default.map,
  fieldsErrors: _reactImmutableProptypes.default.map,
  mediaPaths: _reactImmutableProptypes.default.map.isRequired,
  boundGetAsset: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  openMediaLibrary: _propTypes.default.func.isRequired,
  addAsset: _propTypes.default.func.isRequired,
  removeInsertedMedia: _propTypes.default.func.isRequired,
  onValidate: _propTypes.default.func,
  processControlRef: _propTypes.default.func,
  controlRef: _propTypes.default.func,
  query: _propTypes.default.func.isRequired,
  queryHits: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.object]),
  isFetching: _propTypes.default.bool,
  clearSearch: _propTypes.default.func.isRequired,
  clearFieldErrors: _propTypes.default.func.isRequired,
  loadEntry: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired,
  isEditorComponent: _propTypes.default.bool,
  isNewEditorComponent: _propTypes.default.bool
});

const mapStateToProps = state => ({
  mediaPaths: state.mediaLibrary.get('controlMedia'),
  boundGetAsset: _reducers.getAsset.bind(null, state),
  isFetching: state.search.get('isFetching'),
  queryHits: state.search.get('queryHits')
});

const mapDispatchToProps = {
  openMediaLibrary: _mediaLibrary.openMediaLibrary,
  clearMediaControl: _mediaLibrary.clearMediaControl,
  removeMediaControl: _mediaLibrary.removeMediaControl,
  removeInsertedMedia: _mediaLibrary.removeInsertedMedia,
  addAsset: _media.addAsset,
  query: _search.query,
  loadEntry: (collectionName, slug) => (dispatch, getState) => {
    const collection = getState().collections.get(collectionName);
    return (0, _entries.loadEntry)(collection, slug)(dispatch, getState);
  },
  clearSearch: _search.clearSearch,
  clearFieldErrors: _entries.clearFieldErrors
};
const ConnectedEditorControl = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps, null, {
  withRef: false
})((0, _reactPolyglot.translate)()(EditorControl));
var _default = ConnectedEditorControl;
exports.default = _default;